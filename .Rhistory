download.file("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en", destfile="index.html")
?load.file
file.load
?file
open("index.html")
read.file("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
file.read("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
read
?read
??read
?xmltreeparse
library(XML)
?xmlTreeParse
library(MASS)
school<- painters$school
school<- painters$School
school.freq<- table(school)
school.freq
cbind(school.freq)
max(school.freq)
names(school)
painters
comp <- painters$composition
comp <- painters$Composition
table(comp)
table(painters$School)
table(order(painters$School)
)
table(sort(painters$School))
sort(table(painters$School))
sort(table(painters$School), decreasing=TRUE)
barplot(school.freq)
barplot(school.freq, col="red,blue")
barplot(school.freq, col=c("red","blue")
)
barplot(school.freq, col=c("red","blue","yellow","orange","green")
)
barplot(school.freq, col=c("red","blue","yellow","orange","green","purple"))
barplot(school.freq, col=c("red","blue","yellow","orange","green","purple","grey","black"))
pie(school.freq)
+   "orange", "blue", "pink", "cyan")
+   "orange", "blue", "pink", "cyan")
colors = c("red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan")
pie(school.freq,col=colors)
tapply(painters$Composition, painters$School, mean)
head(faithful)
?install.packages
data("Forbes2000", package="HSAUR")
library(HSAUR)
library("HSAUR")
install.package("HSAUR")
install.packages("HSAUR")
library("HSAUR")
data("Forbes2000")
ls()
head(Forbes2000)
tail(Forbes2000)
names(Forbes2000)
str(Forbes2000)
table(Forbes2000$category)
str(Forbes2000)
table(Forbes2000$country)
str(Forbes2000$country)
rm(list=ls())
data(Forbes2000)
forbes <- data(Forbes2000)
str(Forbes2000)
forbes <- data(Forbes2000)
str(Forbes2000)
forbes<- Forbes2000
class(forbes)
dim(forbes)
nrow(forbes)
ncol(forbes)
levels(forbes[,'category'])
levels(forbes$category)
range(forbes[,"sales"])
diff(range(forbes[,"sales"]))
?diff
order_sales <- order(forbes$sales)
companies <- forbes$name
forbes[order_sales[1:3]]
companies[order_sales[1:3]]
forbes[order_sales[c(2000,1999,1998)]]
forbes[order_sales[c(2000,1999,1998)],]
forbes[order_sales[c(2000,1999,1998)], c("name","sales","profits","assets")]
forbes[order_sales[c(1998)], c("name","sales","profits","assets")]
forbes[order_sales[c(1998,1999,2000)], c("name","sales","profits","assets")]
order_sales
str(order_sales)
str(forbes)
View(Forbes2000)
forbes_order<- order(forbes)
forbes_order<- order(forbes$sales)
tail(forbes_order)
forbes$assets >1000
table(forbes$assets >1000)
table(complete.cases(forbes))
mprofits <- tapply(with(forbes, profits,category),median, na.rm=TRUE)
mprofits <- tapply(forbes$profits,forbes$category,median, na.rm=TRUE)
str(mprofits)
factor(mprofits)
summary(mprofits)
mprofits <- data.fram(tapply(forbes$profits,forbes$category,median, na.rm=TRUE))
mprofits <- data.frame(tapply(forbes$profits,forbes$category,median, na.rm=TRUE))
View(mprofits)
View(mprofits)
View(forbes)
library(datasets)
data(airquality)
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
library(ggplot2)
install.packages("ggplot2")
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
?qplot
??qplot
library(lattice)
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
gplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
??qplot
library(ggplot2)
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars,
FUN = function(x) { c(m = mean(x), s = sd(x)) } )
install.packages("doBy")
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars,
FUN = function(x) { c(m = mean(x), s = sd(x)) } )
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
summaryBy(mpg - cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
summaryBy(mpg ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
summaryBy(mpg ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
x <- summaryBy(mpg ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
x[1,] - x[3,]
x[1,2] - x[3,2]
r<-x[1,2] - x[3,2]
abs(r)
library(doBy)
x <- summaryBy(hp ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
x
r<-x[1,2] - x[3,2]
r
abs(r)
set.seed(1)
rpois(5, 2)
install.packages("shiny")
source('~/.active-rstudio-document', echo=TRUE)
author: "scott"
author: "scott"
date: "Friday, June 20, 2014"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interative Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
getwd()
rm(list=ls())
c = rep(0:1,each=500)
x = rnorm(1000)
lp = -3 + 2*c*x
link_lp = exp(lp)/(1 + exp(lp))
y = (runif(1000) < link_lp)
log.int = glm(y~as.factor(c)*x, family=binomial)
summary(log.int)
mycols = c("red","blue")
plot(log.int$fitted.values ~ x, col=mycols[c+1])
install.packages("Rfacebook")
install.packages("Rook")
source('~/.active-rstudio-document', echo=TRUE)
View(rpartProbs)
setwd("C:\\Users\\srobin\\Documents\\GitHub\\RepData_PeerAssessment1")
unzip(paste0(getwd(),"\\","activity.zip"))
active <- read.csv(paste0(getwd(),"\\","activity.csv"))
summary(active)
str(active)
activeComplete <- active[complete.cases(active),]
activeComplete$dow <- weekdays(as.Date(activeComplete$date))
## histogram of the total number of steps taken each day
perDay <- activeComplete[,1:2]
sum_steps_per_Day <- aggregate(.~ date, data=perDay,sum)
hist(sum_steps_per_Day$steps, plot=TRUE, main="Histogram of Total Steps each Day")
# summary(sum_steps_per_Day)
## mean and median number of steps taken each day
mSteps_per_Day <- aggregate(.~ date, data=perDay,sum)
mSteps <- mean(mSteps_per_Day$steps)
medSteps <- median(mSteps_per_Day$steps)
## time series plot of the average number of steps taken
## (averaged across all days) versus the 5-minute intervals
daily <- activeComplete[,c(1,3)]
pattern <- aggregate(.~ interval,data=daily, mean, na.rm=TRUE)
plot(pattern$interval,pattern$steps, type="l")
## 5-minute interval that, on average, contains the maximum number of steps
maxSteps <- pattern[pattern$steps > 200,]
maxSteps
## strategy for imputing missing data
# Duplicate dataframe to be used to append replacement data
replaceMissing <- active[complete.cases(active),]
replaceMissing$dow <- weekdays(as.Date(replaceMissing$date))
# Replacement data
mean_steps_per_Day <- aggregate(replaceMissing$steps,
by=list(interval = replaceMissing$interval,
dow = replaceMissing$dow),
FUN=mean)
dowMean <- mean_steps_per_Day[,1:3]
names(dowMean)[1:3] <-  c("interval","dow","steps")
# Dataset where steps are NA
missing <- subset(active, is.na(active$steps))
missing$dow <- weekdays(as.Date(missing$date))
# get the Dates and DOW where data is missing
miss <- aggregate(missing$steps,by=list(date=missing$date),mean)
miss$dow <- weekdays(as.Date(miss$date))
for(i in 1:nrow(miss)){
mUse <- subset(missing,missing$date == miss$date[i])
iData <- subset(mean_steps_per_Day, mean_steps_per_Day$dow == miss$dow[i])
names(iData)[3] <- "steps"
mUse$steps <- ifelse(is.na(mUse$steps),
iData$steps[mUse$interval==iData$interval] ,
mUse$steps)
# merge missing and activeComplete
replaceMissing <- rbind(mUse,replaceMissing)
}
meanActiveComplete <- mean(activeComplete$steps)
meanReplaceMissing <- mean(replaceMissing$steps)
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
#activeComplete$weekend <- factor(ifelse(activeComplete$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
#dayofweek <- aggregate(activeComplete$steps,
#                       by=list(inter=activeComplete$interval,
#                               we=activeComplete$weekend),
#                       mean)
# arrange by day of the week starting Monday
#dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
#    "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
#dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
#library(ggplot2)
#ggplot(dayofweek, aes(day,steps)) + geom_point()
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
activeComplete$weekend <- factor(ifelse(activeComplete$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
dayofweek <- aggregate(activeComplete$steps,
by=list(inter=activeComplete$interval,
we=activeComplete$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(day,steps)) + geom_point()
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
activeComplete$weekend <- factor(ifelse(activeComplete$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
dayofweek <- aggregate(activeComplete$steps,
by=list(inter=activeComplete$interval,
we=activeComplete$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(weekend,steps)) + geom_point()
View(activeComplete)
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
dayofweek <- aggregate(activeComplete$steps,
by=list(inter=activeComplete$interval,
we=activeComplete$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(weekend,steps)) + geom_point()
View(replaceMissing)
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
dayofweek <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(we,steps)) + geom_point()
View(weekend)
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
dayofweek <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(dayofweek$we,dayofweek$steps)) + geom_point()
?ggplot
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
dayofweek <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(x=dayofweek$we,y=dayofweek$steps)) + geom_point()
View(dayofweek)
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
dayofweek <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(x=dayofweek$inter,y=dayofweek$x)) + geom_point()
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
dayofweek <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(dayofweek, aes(x=dayofweek$inter,y=dayofweek$x)) + geom_line()
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
weekEnd <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
weekDay <- aggregate(weekday$steps,
by=list(inter=weekday$interval,
we=weekday$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
ggplot(weekEnd, aes(x=inter,y=x)) + geom_line()
ggplot(weekDay, aes(x=inter,y=x)) + geom_line()
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
weekEnd <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
weekDay <- aggregate(weekday$steps,
by=list(inter=weekday$interval,
we=weekday$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
p1 <- ggplot(weekEnd, aes(x=inter,y=x)) + geom_line()
p2 <- ggplot(weekDay, aes(x=inter,y=x)) + geom_line()
multiplot(p1, p2, cols=1)
source('~/GitHub/RepData_PeerAssessment1/multiplot.R', echo=TRUE)
## histogram of the total number of steps taken each day after missing values were
## imputed
perDay_after <- replaceMissing[,1:2]
sum_steps_per_Day_after <- aggregate(.~ date, data=perDay_after,sum)
hist(sum_steps_per_Day_after$steps, plot=TRUE, main="Histogram of Total Steps\n each Day After Missing Values are Input")
# create a factor for Weekend - Weekend or Weekday
replaceMissing$weekend <- factor(ifelse(replaceMissing$dow %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
weekend <- subset(replaceMissing, replaceMissing$weekend == "Weekend")
weekday <- subset(replaceMissing, replaceMissing$weekend == "Weekday")
weekEnd <- aggregate(weekend$steps,
by=list(inter=weekend$interval,
we=weekend$weekend),
mean)
weekDay <- aggregate(weekday$steps,
by=list(inter=weekday$interval,
we=weekday$weekend),
mean)
# arrange by day of the week starting Monday
dayofweek$day <- factor(dayofweek$Group.1, levels= c( "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
dayofweek[order(dayofweek$day), ]
## panel plot comparing the average number of steps taken per
## 5-minute interval across weekdays and weekends
library(ggplot2)
p1 <- ggplot(weekEnd, aes(x=inter,y=x)) + geom_line()
p2 <- ggplot(weekDay, aes(x=inter,y=x)) + geom_line()
multiplot(p1, p2, cols=1)
View(dayofweek)
knit2html("PA1_template.Rmd")
library("knitr", lib.loc="~/R/win-library/3.1")
knit2html("PA1_template.Rmd")
